
DDS9834_sinus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e00  08003e00  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e08  08003e08  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000024  08003e34  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003e34  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e48  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f65  00000000  00000000  00030e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00032e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ef4  00000000  00000000  00034d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e76  00000000  00000000  0005bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5672  00000000  00000000  0006ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001620dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  00162130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003da0 	.word	0x08003da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08003da0 	.word	0x08003da0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc22 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f932 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f900 	bl	80006d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004d4:	f000 f88a 	bl	80005ec <MX_SPI1_Init>
  MX_TIM6_Init();
 80004d8:	f000 f8c6 	bl	8000668 <MX_TIM6_Init>
	HAL_Delay(500);

  UpdateFreq(Freq,SINE);
*/

  UpdateFreq(Freq,SINE);
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <main+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x38>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f9be 	bl	8000868 <UpdateFreq>
  HAL_TIM_Base_Start_IT(&htim6);
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x3c>)
 80004ee:	f002 fe5f 	bl	80031b0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x32>
 80004f4:	20000010 	.word	0x20000010
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000048 	.word	0x20000048

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0b8      	sub	sp, #224	; 0xe0
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050a:	2244      	movs	r2, #68	; 0x44
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fc3e 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2288      	movs	r2, #136	; 0x88
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fc30 	bl	8003d90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054a:	2302      	movs	r3, #2
 800054c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000556:	230a      	movs	r3, #10
 8000558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055c:	2307      	movs	r3, #7
 800055e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000572:	4618      	mov	r0, r3
 8000574:	f000 ffae 	bl	80014d4 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800057e:	f000 fa3f 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2303      	movs	r3, #3
 800058a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fb7a 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005b2:	f000 fa25 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd73 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005cc:	f000 fa18 	bl	8000a00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d4:	f000 ff28 	bl	8001428 <HAL_PWREx_ControlVoltageScaling>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005de:	f000 fa0f 	bl	8000a00 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	37e0      	adds	r7, #224	; 0xe0
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_SPI1_Init+0x74>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <MX_SPI1_Init+0x78>)
 80005f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_SPI1_Init+0x74>)
 80005f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_SPI1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_SPI1_Init+0x74>)
 8000606:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800060a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_SPI1_Init+0x74>)
 800060e:	2202      	movs	r2, #2
 8000610:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_SPI1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_SPI1_Init+0x74>)
 800061a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800061e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_SPI1_Init+0x74>)
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_SPI1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_SPI1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SPI1_Init+0x74>)
 800063a:	2207      	movs	r2, #7
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_SPI1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SPI1_Init+0x74>)
 8000646:	2208      	movs	r2, #8
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_SPI1_Init+0x74>)
 800064c:	f002 f9ea 	bl	8002a24 <HAL_SPI_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 f9d3 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000094 	.word	0x20000094
 8000664:	40013000 	.word	0x40013000

08000668 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_TIM6_Init+0x64>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_TIM6_Init+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_TIM6_Init+0x64>)
 8000680:	2201      	movs	r2, #1
 8000682:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_TIM6_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 665;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_TIM6_Init+0x64>)
 800068c:	f240 2299 	movw	r2, #665	; 0x299
 8000690:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_TIM6_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_TIM6_Init+0x64>)
 800069a:	f002 fd31 	bl	8003100 <HAL_TIM_Base_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006a4:	f000 f9ac 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_TIM6_Init+0x64>)
 80006b6:	f002 fe85 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f99e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000048 	.word	0x20000048
 80006d0:	40001000 	.word	0x40001000

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	f002 fedc 	bl	80034d4 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f96d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000f8 	.word	0x200000f8
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b43      	ldr	r3, [pc, #268]	; (8000858 <MX_GPIO_Init+0x124>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a42      	ldr	r2, [pc, #264]	; (8000858 <MX_GPIO_Init+0x124>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b40      	ldr	r3, [pc, #256]	; (8000858 <MX_GPIO_Init+0x124>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <MX_GPIO_Init+0x124>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a3c      	ldr	r2, [pc, #240]	; (8000858 <MX_GPIO_Init+0x124>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_GPIO_Init+0x124>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0x124>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a36      	ldr	r2, [pc, #216]	; (8000858 <MX_GPIO_Init+0x124>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_GPIO_Init+0x124>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <MX_GPIO_Init+0x124>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <MX_GPIO_Init+0x124>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <MX_GPIO_Init+0x124>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80007b0:	482a      	ldr	r0, [pc, #168]	; (800085c <MX_GPIO_Init+0x128>)
 80007b2:	f000 fdfb 	bl	80013ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007bc:	4827      	ldr	r0, [pc, #156]	; (800085c <MX_GPIO_Init+0x128>)
 80007be:	f000 fdf5 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 fdee 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_GPIO_Init+0x12c>)
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	481f      	ldr	r0, [pc, #124]	; (8000864 <MX_GPIO_Init+0x130>)
 80007e6:	f000 fc1f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <MX_GPIO_Init+0x128>)
 8000804:	f000 fc10 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 fc00 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <MX_GPIO_Init+0x128>)
 800083c:	f000 fbf4 	bl	8001028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2028      	movs	r0, #40	; 0x28
 8000846:	f000 fbb8 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f000 fbd1 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400
 8000860:	10110000 	.word	0x10110000
 8000864:	48000800 	.word	0x48000800

08000868 <UpdateFreq>:
}

*/

void UpdateFreq(long Freq, int Wave)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]

	int Reg1 = 0x2100;
 8000872:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000876:	61bb      	str	r3, [r7, #24]
	int Reg2 = 0xC000;
 8000878:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800087c:	617b      	str	r3, [r7, #20]
	AD_FMult = pow(2,28) / AD_Crystal ;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <UpdateFreq+0xc8>)
 8000880:	ed93 7a00 	vldr	s14, [r3]
 8000884:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000934 <UpdateFreq+0xcc>
 8000888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <UpdateFreq+0xd0>)
 800088e:	edc3 7a00 	vstr	s15, [r3]
	long FTW = AD_FMult*Freq ;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <UpdateFreq+0xd0>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008aa:	ee17 3a90 	vmov	r3, s15
 80008ae:	61fb      	str	r3, [r7, #28]
	if (Wave == SQUARE) FTW = FTW <<1 ;
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	4b22      	ldr	r3, [pc, #136]	; (800093c <UpdateFreq+0xd4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d102      	bne.n	80008c0 <UpdateFreq+0x58>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
	int MSB = (int) ((FTW & 0xFFFC000) >> 14);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	139b      	asrs	r3, r3, #14
 80008c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80008c8:	613b      	str	r3, [r7, #16]
	int LSB = (int) (FTW & 0x3FFF);
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80008d0:	60fb      	str	r3, [r7, #12]

	LSB |= 0x4000;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	60fb      	str	r3, [r7, #12]
	MSB |= 0x4000;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	613b      	str	r3, [r7, #16]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&Reg1, 1, 100);
 80008e2:	f107 0118 	add.w	r1, r7, #24
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	2201      	movs	r2, #1
 80008ea:	4815      	ldr	r0, [pc, #84]	; (8000940 <UpdateFreq+0xd8>)
 80008ec:	f002 f93d 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&LSB, 1, 100);
 80008f0:	f107 010c 	add.w	r1, r7, #12
 80008f4:	2364      	movs	r3, #100	; 0x64
 80008f6:	2201      	movs	r2, #1
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <UpdateFreq+0xd8>)
 80008fa:	f002 f936 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&MSB, 1, 100);
 80008fe:	f107 0110 	add.w	r1, r7, #16
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	2201      	movs	r2, #1
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <UpdateFreq+0xd8>)
 8000908:	f002 f92f 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&Reg2, 1, 100);
 800090c:	f107 0114 	add.w	r1, r7, #20
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	2201      	movs	r2, #1
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <UpdateFreq+0xd8>)
 8000916:	f002 f928 	bl	8002b6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&Wave, 1, 100);
 800091a:	4639      	mov	r1, r7
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	2201      	movs	r2, #1
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <UpdateFreq+0xd8>)
 8000922:	f002 f922 	bl	8002b6a <HAL_SPI_Transmit>

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000004 	.word	0x20000004
 8000934:	4d800000 	.word	0x4d800000
 8000938:	20000040 	.word	0x20000040
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000094 	.word	0x20000094

08000944 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B1_Pin)
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000954:	d144      	bne.n	80009e0 <HAL_GPIO_EXTI_Callback+0x9c>
		{
		  if ( Freq < 10000){Freq = Freq + 1000;}
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f242 720f 	movw	r2, #9999	; 0x270f
 800095e:	4293      	cmp	r3, r2
 8000960:	dc06      	bgt.n	8000970 <HAL_GPIO_EXTI_Callback+0x2c>
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e028      	b.n	80009c2 <HAL_GPIO_EXTI_Callback+0x7e>
		  else if (Freq >= 10000 && Freq < 100000){Freq = Freq + 10000;}
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f242 720f 	movw	r2, #9999	; 0x270f
 8000978:	4293      	cmp	r3, r2
 800097a:	dd0c      	ble.n	8000996 <HAL_GPIO_EXTI_Callback+0x52>
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <HAL_GPIO_EXTI_Callback+0xa8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	dc07      	bgt.n	8000996 <HAL_GPIO_EXTI_Callback+0x52>
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800098e:	3310      	adds	r3, #16
 8000990:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	e015      	b.n	80009c2 <HAL_GPIO_EXTI_Callback+0x7e>
		  else if (Freq >= 100000 && Freq < 1000000){Freq = Freq + 100000;}
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <HAL_GPIO_EXTI_Callback+0xa8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	dd0c      	ble.n	80009ba <HAL_GPIO_EXTI_Callback+0x76>
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_GPIO_EXTI_Callback+0xac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	dc07      	bgt.n	80009ba <HAL_GPIO_EXTI_Callback+0x76>
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80009b2:	33a0      	adds	r3, #160	; 0xa0
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e003      	b.n	80009c2 <HAL_GPIO_EXTI_Callback+0x7e>
		  else {Freq = 1000;}
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c0:	601a      	str	r2, [r3, #0]

		  UpdateFreq(Freq,SINE);
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff4b 	bl	8000868 <UpdateFreq>

		  // a modifier en fixant la frequence eventuellement en fonction d'une IO
		  if (AD_PSK_sel == RESET )
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d102      	bne.n	80009e0 <HAL_GPIO_EXTI_Callback+0x9c>
		  {
				BPSK = 1;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_GPIO_EXTI_Callback+0xb8>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
//		  HAL_SPI_Transmit(&hspi1, spitx, 1, 100);
//	}
//	else{
//		__NOP();
	}
 }
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000010 	.word	0x20000010
 80009ec:	0001869f 	.word	0x0001869f
 80009f0:	000f423f 	.word	0x000f423f
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000044 	.word	0x20000044

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_SPI_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d128      	bne.n	8000ac8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_SPI_MspInit+0x80>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000aa6:	23b0      	movs	r3, #176	; 0xb0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fab0 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_TIM_Base_MspInit+0x38>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10b      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6593      	str	r3, [r2, #88]	; 0x58
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_TIM_Base_MspInit+0x3c>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40001000 	.word	0x40001000
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x7c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d128      	bne.n	8000b8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fa4e 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8ec 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// debounce code ou anti rebond
	for (int i=0;i<65535;i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e016      	b.n	8000c2a <EXTI15_10_IRQHandler+0x3a>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4810      	ldr	r0, [pc, #64]	; (8000c44 <EXTI15_10_IRQHandler+0x54>)
 8000c02:	f000 fbbb 	bl	800137c <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00b      	beq.n	8000c24 <EXTI15_10_IRQHandler+0x34>
		{
			if(tDelay == 250)
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <EXTI15_10_IRQHandler+0x58>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	2bfa      	cmp	r3, #250	; 0xfa
 8000c12:	d104      	bne.n	8000c1e <EXTI15_10_IRQHandler+0x2e>
				tDelay=1000;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <EXTI15_10_IRQHandler+0x58>)
 8000c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c1a:	801a      	strh	r2, [r3, #0]
 8000c1c:	e002      	b.n	8000c24 <EXTI15_10_IRQHandler+0x34>
			else
				tDelay = 250;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <EXTI15_10_IRQHandler+0x58>)
 8000c20:	22fa      	movs	r2, #250	; 0xfa
 8000c22:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<65535;i++)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dde3      	ble.n	8000bfc <EXTI15_10_IRQHandler+0xc>
		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c38:	f000 fbd0 	bl	80013dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	48000800 	.word	0x48000800
 8000c48:	20000014 	.word	0x20000014

08000c4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <SystemInit+0x64>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <SystemInit+0x64>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <SystemInit+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <SystemInit+0x68>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <SystemInit+0x68>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <SystemInit+0x68>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <SystemInit+0x68>)
 8000c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SystemInit+0x68>)
 8000c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SystemInit+0x68>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <SystemInit+0x68>)
 8000c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <SystemInit+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x64>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffc6 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <LoopForever+0x16>)
	cmp	r2, r3
 8000ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 f82f 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fbe9 	bl	80004c0 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cf4:	08003e10 	.word	0x08003e10
	ldr	r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cfc:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000d00:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000d04:	2000017c 	.word	0x2000017c

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f93e 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fe67 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f949 	bl	800100e <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f913 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000020 	.word	0x20000020
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	2000001c 	.word	0x2000001c

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000020 	.word	0x20000020
 8000de8:	20000178 	.word	0x20000178

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000178 	.word	0x20000178

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e17f      	b.n	8001338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8171 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d00b      	beq.n	8001070 <HAL_GPIO_Init+0x48>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	2b11      	cmp	r3, #17
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d118      	bne.n	8001110 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x128>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ac 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	; 0x60
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_GPIO_Init+0x330>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_GPIO_Init+0x334>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x242>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x22a>
 800124e:	2306      	movs	r3, #6
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001252:	2307      	movs	r3, #7
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x244>
 800126a:	2300      	movs	r3, #0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127c:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_GPIO_Init+0x334>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_GPIO_Init+0x350>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x350>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x350>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_GPIO_Init+0x350>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f ae78 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	48001400 	.word	0x48001400
 8001374:	48001800 	.word	0x48001800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff faa2 	bl	8000944 <HAL_GPIO_EXTI_Callback>
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_PWREx_GetVoltageRange+0x18>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40007000 	.word	0x40007000

08001428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001436:	d130      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001444:	d038      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2232      	movs	r2, #50	; 0x32
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	e002      	b.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3b01      	subs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001480:	d102      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f2      	bne.n	800146e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d110      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e00f      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a6:	d007      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000
 80014cc:	20000018 	.word	0x20000018
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e3d4      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4ba1      	ldr	r3, [pc, #644]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f0:	4b9e      	ldr	r3, [pc, #632]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80e4 	beq.w	80016d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_RCC_OscConfig+0x4a>
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	f040 808b 	bne.w	800162c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b01      	cmp	r3, #1
 800151a:	f040 8087 	bne.w	800162c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151e:	4b93      	ldr	r3, [pc, #588]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x62>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e3ac      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_RCC_OscConfig+0x7c>
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800154e:	e005      	b.n	800155c <HAL_RCC_OscConfig+0x88>
 8001550:	4b86      	ldr	r3, [pc, #536]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155c:	4293      	cmp	r3, r2
 800155e:	d223      	bcs.n	80015a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fd41 	bl	8001fec <RCC_SetFlashLatencyFromMSIRange>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e38d      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b7a      	ldr	r3, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4977      	ldr	r1, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001592:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4972      	ldr	r1, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e025      	b.n	80015f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6f      	ldr	r2, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015ae:	f043 0308 	orr.w	r3, r3, #8
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	496a      	ldr	r1, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c6:	4b69      	ldr	r3, [pc, #420]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	4965      	ldr	r1, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fd01 	bl	8001fec <RCC_SetFlashLatencyFromMSIRange>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e34d      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f4:	f000 fc36 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	495a      	ldr	r1, [pc, #360]	; (8001770 <HAL_RCC_OscConfig+0x29c>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x2a0>)
 8001612:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_RCC_OscConfig+0x2a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb97 	bl	8000d4c <HAL_InitTick>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d052      	beq.n	80016ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	e331      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d032      	beq.n	800169a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001640:	f7ff fbd4 	bl	8000dec <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001648:	f7ff fbd0 	bl	8000dec <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e31a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a40      	ldr	r2, [pc, #256]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	493b      	ldr	r1, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4936      	ldr	r1, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e01a      	b.n	80016d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a33      	ldr	r2, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fba1 	bl	8000dec <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ae:	f7ff fb9d 	bl	8000dec <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e2e7      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x1da>
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d074      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x21a>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_RCC_OscConfig+0x298>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d064      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d160      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e2c4      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x24a>
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a15      	ldr	r2, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e01d      	b.n	800175a <HAL_RCC_OscConfig+0x286>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x26e>
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800172e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <HAL_RCC_OscConfig+0x298>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x286>
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x298>)
 8001754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01c      	beq.n	800179c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fb43 	bl	8000dec <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001768:	e011      	b.n	800178e <HAL_RCC_OscConfig+0x2ba>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	08003db8 	.word	0x08003db8
 8001774:	20000018 	.word	0x20000018
 8001778:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fb36 	bl	8000dec <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e280      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178e:	4baf      	ldr	r3, [pc, #700]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x2a8>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fb26 	bl	8000dec <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb22 	bl	8000dec <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e26c      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	4ba5      	ldr	r3, [pc, #660]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2d0>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d060      	beq.n	8001894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x310>
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d116      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	4b99      	ldr	r3, [pc, #612]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x328>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e249      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	4990      	ldr	r1, [pc, #576]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	e040      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d023      	beq.n	8001862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181a:	4b8c      	ldr	r3, [pc, #560]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a8b      	ldr	r2, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fae1 	bl	8000dec <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fadd 	bl	8000dec <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e227      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	497c      	ldr	r1, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b7a      	ldr	r3, [pc, #488]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fabd 	bl	8000dec <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fab9 	bl	8000dec <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e203      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	4b70      	ldr	r3, [pc, #448]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d03c      	beq.n	800191a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ae:	4a67      	ldr	r2, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa98 	bl	8000dec <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fa94 	bl	8000dec <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1de      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d2:	4b5e      	ldr	r3, [pc, #376]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ef      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3ec>
 80018e0:	e01b      	b.n	800191a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa7b 	bl	8000dec <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa77 	bl	8000dec <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1c1      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ef      	bne.n	80018fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a6 	beq.w	8001a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a43      	ldr	r2, [pc, #268]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x57c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d118      	bne.n	8001992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x57c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <HAL_RCC_OscConfig+0x57c>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196c:	f7ff fa3e 	bl	8000dec <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001974:	f7ff fa3a 	bl	8000dec <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e184      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_OscConfig+0x57c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x4d8>
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019aa:	e024      	b.n	80019f6 <HAL_RCC_OscConfig+0x522>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d110      	bne.n	80019d6 <HAL_RCC_OscConfig+0x502>
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d4:	e00f      	b.n	80019f6 <HAL_RCC_OscConfig+0x522>
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 80019ee:	f023 0304 	bic.w	r3, r3, #4
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f9f5 	bl	8000dec <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff f9f1 	bl	8000dec <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e139      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x578>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ed      	beq.n	8001a06 <HAL_RCC_OscConfig+0x532>
 8001a2a:	e01a      	b.n	8001a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f9de 	bl	8000dec <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a32:	e00f      	b.n	8001a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f9da 	bl	8000dec <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d906      	bls.n	8001a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e122      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a54:	4b90      	ldr	r3, [pc, #576]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e8      	bne.n	8001a34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a8a      	ldr	r2, [pc, #552]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8108 	beq.w	8001c8e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	f040 80d0 	bne.w	8001c28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a88:	4b83      	ldr	r3, [pc, #524]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d130      	bne.n	8001afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d127      	bne.n	8001afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d11f      	bne.n	8001afe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac8:	2a07      	cmp	r2, #7
 8001aca:	bf14      	ite	ne
 8001acc:	2201      	movne	r2, #1
 8001ace:	2200      	moveq	r2, #0
 8001ad0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d113      	bne.n	8001afe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d06e      	beq.n	8001bdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d069      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b10:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b7      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b2c:	f7ff f95e 	bl	8000dec <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f95a 	bl	8000dec <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0a4      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_OscConfig+0x7c8>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b6c:	0212      	lsls	r2, r2, #8
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b74:	0852      	lsrs	r2, r2, #1
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0552      	lsls	r2, r2, #21
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b80:	0852      	lsrs	r2, r2, #1
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0652      	lsls	r2, r2, #25
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b8c:	0912      	lsrs	r2, r2, #4
 8001b8e:	0452      	lsls	r2, r2, #17
 8001b90:	430a      	orrs	r2, r1
 8001b92:	4941      	ldr	r1, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3e      	ldr	r2, [pc, #248]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb0:	f7ff f91c 	bl	8000dec <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f918 	bl	8000dec <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e062      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd6:	e05a      	b.n	8001c8e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e059      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d152      	bne.n	8001c8e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf4:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c00:	f7ff f8f4 	bl	8000dec <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f8f0 	bl	8000dec <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03a      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x734>
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d02d      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c4c:	f023 0303 	bic.w	r3, r3, #3
 8001c50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8c3 	bl	8000dec <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f8bf 	bl	8000dec <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x7c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x796>
 8001c88:	e001      	b.n	8001c8e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	f99d808c 	.word	0xf99d808c

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0c8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4961      	ldr	r1, [pc, #388]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b0      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d04c      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d121      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e09e      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e092      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e086      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e07e      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 0203 	bic.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	493f      	ldr	r1, [pc, #252]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5a:	f7ff f847 	bl	8000dec <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f7ff f843 	bl	8000dec <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e066      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 020c 	and.w	r2, r3, #12
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d1eb      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	492c      	ldr	r1, [pc, #176]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4924      	ldr	r1, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e036      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4918      	ldr	r1, [pc, #96]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4910      	ldr	r1, [pc, #64]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e16:	f000 f825 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_ClockConfig+0x1b4>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490c      	ldr	r1, [pc, #48]	; (8001e58 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe ff86 	bl	8000d4c <HAL_InitTick>
 8001e40:	4603      	mov	r3, r0
 8001e42:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e44:	7afb      	ldrb	r3, [r7, #11]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003db8 	.word	0x08003db8
 8001e5c:	20000018 	.word	0x20000018
 8001e60:	2000001c 	.word	0x2000001c

08001e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7c:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d121      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d11e      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	e004      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d134      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d003      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xac>
 8001f08:	e005      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0c:	617b      	str	r3, [r7, #20]
      break;
 8001f0e:	e005      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f12:	617b      	str	r3, [r7, #20]
      break;
 8001f14:	e002      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	617b      	str	r3, [r7, #20]
      break;
 8001f1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	3301      	adds	r3, #1
 8001f28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	fb02 f203 	mul.w	r2, r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	0e5b      	lsrs	r3, r3, #25
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08003dd0 	.word	0x08003dd0
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000018 	.word	0x20000018

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f98:	f7ff fff0 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4904      	ldr	r1, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08003dc8 	.word	0x08003dc8

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc4:	f7ff ffda 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08003dc8 	.word	0x08003dc8

08001fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002004:	f7ff fa02 	bl	800140c <HAL_PWREx_GetVoltageRange>
 8002008:	6178      	str	r0, [r7, #20]
 800200a:	e014      	b.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002024:	f7ff f9f2 	bl	800140c <HAL_PWREx_GetVoltageRange>
 8002028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d10b      	bne.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d919      	bls.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2ba0      	cmp	r3, #160	; 0xa0
 8002048:	d902      	bls.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800204a:	2302      	movs	r3, #2
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e013      	b.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	e010      	b.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d902      	bls.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800205c:	2303      	movs	r3, #3
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e00a      	b.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	d102      	bne.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002068:	2302      	movs	r3, #2
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e004      	b.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b70      	cmp	r3, #112	; 0x70
 8002072:	d101      	bne.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002074:	2301      	movs	r3, #1
 8002076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 0207 	bic.w	r2, r3, #7
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40022000 	.word	0x40022000

080020ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b4:	2300      	movs	r3, #0
 80020b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b8:	2300      	movs	r3, #0
 80020ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d041      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020d0:	d02a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020d6:	d824      	bhi.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020dc:	d008      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020e2:	d81e      	bhi.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ec:	d010      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020ee:	e018      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f0:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a85      	ldr	r2, [pc, #532]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020fc:	e015      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fabb 	bl	8002680 <RCCEx_PLLSAI1_Config>
 800210a:	4603      	mov	r3, r0
 800210c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210e:	e00c      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3320      	adds	r3, #32
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fba6 	bl	8002868 <RCCEx_PLLSAI2_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002120:	e003      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	74fb      	strb	r3, [r7, #19]
      break;
 8002126:	e000      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213e:	4973      	ldr	r1, [pc, #460]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002146:	e001      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d041      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800215c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002160:	d02a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002166:	d824      	bhi.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800216c:	d008      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002172:	d81e      	bhi.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d010      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800217e:	e018      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800218c:	e015      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fa73 	bl	8002680 <RCCEx_PLLSAI1_Config>
 800219a:	4603      	mov	r3, r0
 800219c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800219e:	e00c      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3320      	adds	r3, #32
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fb5e 	bl	8002868 <RCCEx_PLLSAI2_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b0:	e003      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	74fb      	strb	r3, [r7, #19]
      break;
 80021b6:	e000      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021c0:	4b52      	ldr	r3, [pc, #328]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ce:	494f      	ldr	r1, [pc, #316]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021d6:	e001      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a0 	beq.w	800232a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021fe:	2300      	movs	r3, #0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00d      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a40      	ldr	r2, [pc, #256]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
 8002210:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221c:	2301      	movs	r3, #1
 800221e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3a      	ldr	r2, [pc, #232]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800222c:	f7fe fdde 	bl	8000dec <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe fdda 	bl	8000dec <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d902      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	74fb      	strb	r3, [r7, #19]
        break;
 8002246:	e005      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ef      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d15c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002264:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01f      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d019      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7fe fd99 	bl	8000dec <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022bc:	e00b      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fd95 	bl	8000dec <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d902      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	74fb      	strb	r3, [r7, #19]
            break;
 80022d4:	e006      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ec      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fa:	4904      	ldr	r1, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002302:	e009      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
 8002308:	e006      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002318:	7c7b      	ldrb	r3, [r7, #17]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d105      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	4a9d      	ldr	r2, [pc, #628]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002336:	4b98      	ldr	r3, [pc, #608]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f023 0203 	bic.w	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	4994      	ldr	r1, [pc, #592]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 020c 	bic.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	498c      	ldr	r1, [pc, #560]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237a:	4b87      	ldr	r3, [pc, #540]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4983      	ldr	r1, [pc, #524]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800239c:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	497b      	ldr	r1, [pc, #492]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	4972      	ldr	r1, [pc, #456]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	496a      	ldr	r1, [pc, #424]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	4961      	ldr	r1, [pc, #388]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002424:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	4959      	ldr	r1, [pc, #356]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	4950      	ldr	r1, [pc, #320]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	4948      	ldr	r1, [pc, #288]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	493f      	ldr	r1, [pc, #252]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d028      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ba:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ca:	d106      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
 80024d8:	e011      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e2:	d10c      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f8c8 	bl	8002680 <RCCEx_PLLSAI1_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d028      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	491f      	ldr	r1, [pc, #124]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002528:	d106      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002534:	60d3      	str	r3, [r2, #12]
 8002536:	e011      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f899 	bl	8002680 <RCCEx_PLLSAI1_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02b      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002586:	d109      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002592:	60d3      	str	r3, [r2, #12]
 8002594:	e014      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f867 	bl	8002680 <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025da:	4928      	ldr	r1, [pc, #160]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ea:	d10d      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f844 	bl	8002680 <RCCEx_PLLSAI1_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d014      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	74bb      	strb	r3, [r7, #18]
 8002606:	e011      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800260c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002610:	d10c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3320      	adds	r3, #32
 8002616:	2102      	movs	r1, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f925 	bl	8002868 <RCCEx_PLLSAI2_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002646:	490d      	ldr	r1, [pc, #52]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266a:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002672:	7cbb      	ldrb	r3, [r7, #18]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000

08002680 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268e:	4b75      	ldr	r3, [pc, #468]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d018      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800269a:	4b72      	ldr	r3, [pc, #456]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0203 	and.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10d      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
       ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026b2:	4b6c      	ldr	r3, [pc, #432]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
       ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d047      	beq.n	8002756 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e044      	b.n	8002756 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d018      	beq.n	8002706 <RCCEx_PLLSAI1_Config+0x86>
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d825      	bhi.n	8002724 <RCCEx_PLLSAI1_Config+0xa4>
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d002      	beq.n	80026e2 <RCCEx_PLLSAI1_Config+0x62>
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d009      	beq.n	80026f4 <RCCEx_PLLSAI1_Config+0x74>
 80026e0:	e020      	b.n	8002724 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f2:	e01a      	b.n	800272a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f4:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d116      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002704:	e013      	b.n	800272e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002706:	4b57      	ldr	r3, [pc, #348]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002712:	4b54      	ldr	r3, [pc, #336]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002722:	e006      	b.n	8002732 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e004      	b.n	8002734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
 800272c:	e002      	b.n	8002734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002732:	bf00      	nop
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	430b      	orrs	r3, r1
 8002750:	4944      	ldr	r1, [pc, #272]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d17d      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800275c:	4b41      	ldr	r3, [pc, #260]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a40      	ldr	r2, [pc, #256]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fb40 	bl	8000dec <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276e:	e009      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002770:	f7fe fb3c 	bl	8000dec <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	73fb      	strb	r3, [r7, #15]
        break;
 8002782:	e005      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ef      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d160      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d111      	bne.n	80027c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6892      	ldr	r2, [r2, #8]
 80027ac:	0211      	lsls	r1, r2, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	0912      	lsrs	r2, r2, #4
 80027b4:	0452      	lsls	r2, r2, #17
 80027b6:	430a      	orrs	r2, r1
 80027b8:	492a      	ldr	r1, [pc, #168]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	610b      	str	r3, [r1, #16]
 80027be:	e027      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d112      	bne.n	80027ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6892      	ldr	r2, [r2, #8]
 80027d6:	0211      	lsls	r1, r2, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6912      	ldr	r2, [r2, #16]
 80027dc:	0852      	lsrs	r2, r2, #1
 80027de:	3a01      	subs	r2, #1
 80027e0:	0552      	lsls	r2, r2, #21
 80027e2:	430a      	orrs	r2, r1
 80027e4:	491f      	ldr	r1, [pc, #124]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	610b      	str	r3, [r1, #16]
 80027ea:	e011      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6892      	ldr	r2, [r2, #8]
 80027fc:	0211      	lsls	r1, r2, #8
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6952      	ldr	r2, [r2, #20]
 8002802:	0852      	lsrs	r2, r2, #1
 8002804:	3a01      	subs	r2, #1
 8002806:	0652      	lsls	r2, r2, #25
 8002808:	430a      	orrs	r2, r1
 800280a:	4916      	ldr	r1, [pc, #88]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a13      	ldr	r2, [pc, #76]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fae6 	bl	8000dec <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002822:	e009      	b.n	8002838 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002824:	f7fe fae2 	bl	8000dec <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	73fb      	strb	r3, [r7, #15]
          break;
 8002836:	e005      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d018      	beq.n	80028b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0203 	and.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d10d      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
       ||
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800289a:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
       ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d047      	beq.n	800293e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e044      	b.n	800293e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d018      	beq.n	80028ee <RCCEx_PLLSAI2_Config+0x86>
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d825      	bhi.n	800290c <RCCEx_PLLSAI2_Config+0xa4>
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d002      	beq.n	80028ca <RCCEx_PLLSAI2_Config+0x62>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d009      	beq.n	80028dc <RCCEx_PLLSAI2_Config+0x74>
 80028c8:	e020      	b.n	800290c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ca:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11d      	bne.n	8002912 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028da:	e01a      	b.n	8002912 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e013      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ee:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028fa:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800290a:	e006      	b.n	800291a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e004      	b.n	800291c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002912:	bf00      	nop
 8002914:	e002      	b.n	800291c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800291a:	bf00      	nop
    }

    if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	430b      	orrs	r3, r1
 8002938:	4939      	ldr	r1, [pc, #228]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d167      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7fe fa4c 	bl	8000dec <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002956:	e009      	b.n	800296c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002958:	f7fe fa48 	bl	8000dec <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	73fb      	strb	r3, [r7, #15]
        break;
 800296a:	e005      	b.n	8002978 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ef      	bne.n	8002958 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d14a      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	0211      	lsls	r1, r2, #8
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	0912      	lsrs	r2, r2, #4
 800299c:	0452      	lsls	r2, r2, #17
 800299e:	430a      	orrs	r2, r1
 80029a0:	491f      	ldr	r1, [pc, #124]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	614b      	str	r3, [r1, #20]
 80029a6:	e011      	b.n	80029cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6912      	ldr	r2, [r2, #16]
 80029be:	0852      	lsrs	r2, r2, #1
 80029c0:	3a01      	subs	r2, #1
 80029c2:	0652      	lsls	r2, r2, #25
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4916      	ldr	r1, [pc, #88]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fa08 	bl	8000dec <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029de:	e009      	b.n	80029f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e0:	f7fe fa04 	bl	8000dec <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	73fb      	strb	r3, [r7, #15]
          break;
 80029f2:	e005      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ef      	beq.n	80029e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4904      	ldr	r1, [pc, #16]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e095      	b.n	8002b62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a46:	d009      	beq.n	8002a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
 8002a4e:	e005      	b.n	8002a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fd ffec 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a9c:	d902      	bls.n	8002aa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e002      	b.n	8002aaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ab2:	d007      	beq.n	8002ac4 <HAL_SPI_Init+0xa0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002abc:	d002      	beq.n	8002ac4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	ea42 0103 	orr.w	r1, r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	f003 0204 	and.w	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b40:	ea42 0103 	orr.w	r1, r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_SPI_Transmit+0x22>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e158      	b.n	8002e3e <HAL_SPI_Transmit+0x2d4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b94:	f7fe f92a 	bl	8000dec <HAL_GetTick>
 8002b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bae:	e13d      	b.n	8002e2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SPI_Transmit+0x52>
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bc0:	e134      	b.n	8002e2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0c:	d10f      	bne.n	8002c2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d007      	beq.n	8002c4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c54:	d94b      	bls.n	8002cee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Transmit+0xfa>
 8002c5e:	8afb      	ldrh	r3, [r7, #22]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d13e      	bne.n	8002ce2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c88:	e02b      	b.n	8002ce2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d112      	bne.n	8002cbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cbc:	e011      	b.n	8002ce2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cbe:	f7fe f895 	bl	8000dec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d803      	bhi.n	8002cd6 <HAL_SPI_Transmit+0x16c>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d102      	bne.n	8002cdc <HAL_SPI_Transmit+0x172>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ce0:	e0a4      	b.n	8002e2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ce      	bne.n	8002c8a <HAL_SPI_Transmit+0x120>
 8002cec:	e07c      	b.n	8002de8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_SPI_Transmit+0x192>
 8002cf6:	8afb      	ldrh	r3, [r7, #22]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d170      	bne.n	8002dde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d912      	bls.n	8002d2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b02      	subs	r3, #2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2a:	e058      	b.n	8002dde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	7812      	ldrb	r2, [r2, #0]
 8002d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d52:	e044      	b.n	8002dde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d12b      	bne.n	8002dba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d912      	bls.n	8002d92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	1c9a      	adds	r2, r3, #2
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b02      	subs	r3, #2
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d90:	e025      	b.n	8002dde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002db8:	e011      	b.n	8002dde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dba:	f7fe f817 	bl	8000dec <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d803      	bhi.n	8002dd2 <HAL_SPI_Transmit+0x268>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d102      	bne.n	8002dd8 <HAL_SPI_Transmit+0x26e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ddc:	e026      	b.n	8002e2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1b5      	bne.n	8002d54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f941 	bl	8003074 <SPI_EndRxTxTransaction>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e000      	b.n	8002e2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e58:	f7fd ffc8 	bl	8000dec <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e68:	f7fd ffc0 	bl	8000dec <HAL_GetTick>
 8002e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	015b      	lsls	r3, r3, #5
 8002e74:	0d1b      	lsrs	r3, r3, #20
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e7e:	e054      	b.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d050      	beq.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e88:	f7fd ffb0 	bl	8000dec <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d902      	bls.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d13d      	bne.n	8002f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb6:	d111      	bne.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec0:	d004      	beq.n	8002ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d107      	bne.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee4:	d10f      	bne.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e017      	b.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d19b      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000018 	.word	0x20000018

08002f58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f66:	f7fd ff41 	bl	8000dec <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f76:	f7fd ff39 	bl	8000dec <HAL_GetTick>
 8002f7a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00da      	lsls	r2, r3, #3
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	0d1b      	lsrs	r3, r3, #20
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f94:	e05f      	b.n	8003056 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f9c:	d106      	bne.n	8002fac <SPI_WaitFifoStateUntilTimeout+0x54>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d050      	beq.n	8003056 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fb4:	f7fd ff1a 	bl	8000dec <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d902      	bls.n	8002fca <SPI_WaitFifoStateUntilTimeout+0x72>
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d13d      	bne.n	8003046 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe2:	d111      	bne.n	8003008 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fec:	d004      	beq.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d107      	bne.n	8003008 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d10f      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e010      	b.n	8003068 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3b01      	subs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d197      	bne.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000018 	.word	0x20000018

08003074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff ff63 	bl	8002f58 <SPI_WaitFifoStateUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e027      	b.n	80030f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff fec8 	bl	8002e48 <SPI_WaitFlagStateUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e014      	b.n	80030f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff3c 	bl	8002f58 <SPI_WaitFifoStateUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e000      	b.n	80030f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e049      	b.n	80031a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fcd6 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 f8a6 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04f      	b.n	8003268 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a23      	ldr	r2, [pc, #140]	; (8003274 <HAL_TIM_Base_Start_IT+0xc4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d018      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_TIM_Base_Start_IT+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start_IT+0xcc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIM_Base_Start_IT+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_Base_Start_IT+0xd4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIM_Base_Start_IT+0x76>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_TIM_Base_Start_IT+0xd8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d115      	bne.n	8003252 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_TIM_Base_Start_IT+0xdc>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d015      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323e:	d011      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	e008      	b.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e000      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40013400 	.word	0x40013400
 8003288:	40014000 	.word	0x40014000
 800328c:	00010007 	.word	0x00010007

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d01b      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d017      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e068      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01d      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d018      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40013400 	.word	0x40013400
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40014000 	.word	0x40014000

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e040      	b.n	8003568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fb0e 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f82c 	bl	8003570 <UART_SetConfig>
 8003518:	4603      	mov	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e022      	b.n	8003568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 faaa 	bl	8003a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fb31 	bl	8003bc8 <UART_CheckIdleState>
 8003566:	4603      	mov	r3, r0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4bad      	ldr	r3, [pc, #692]	; (8003850 <UART_SetConfig+0x2e0>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	69f9      	ldr	r1, [r7, #28]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa2      	ldr	r2, [pc, #648]	; (8003854 <UART_SetConfig+0x2e4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a99      	ldr	r2, [pc, #612]	; (8003858 <UART_SetConfig+0x2e8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d121      	bne.n	800363a <UART_SetConfig+0xca>
 80035f6:	4b99      	ldr	r3, [pc, #612]	; (800385c <UART_SetConfig+0x2ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d817      	bhi.n	8003634 <UART_SetConfig+0xc4>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0x9c>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	08003629 	.word	0x08003629
 8003614:	08003623 	.word	0x08003623
 8003618:	0800362f 	.word	0x0800362f
 800361c:	2301      	movs	r3, #1
 800361e:	76fb      	strb	r3, [r7, #27]
 8003620:	e0e7      	b.n	80037f2 <UART_SetConfig+0x282>
 8003622:	2302      	movs	r3, #2
 8003624:	76fb      	strb	r3, [r7, #27]
 8003626:	e0e4      	b.n	80037f2 <UART_SetConfig+0x282>
 8003628:	2304      	movs	r3, #4
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e0e1      	b.n	80037f2 <UART_SetConfig+0x282>
 800362e:	2308      	movs	r3, #8
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e0de      	b.n	80037f2 <UART_SetConfig+0x282>
 8003634:	2310      	movs	r3, #16
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e0db      	b.n	80037f2 <UART_SetConfig+0x282>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a88      	ldr	r2, [pc, #544]	; (8003860 <UART_SetConfig+0x2f0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d132      	bne.n	80036aa <UART_SetConfig+0x13a>
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <UART_SetConfig+0x2ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d828      	bhi.n	80036a4 <UART_SetConfig+0x134>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0xe8>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036a5 	.word	0x080036a5
 8003660:	080036a5 	.word	0x080036a5
 8003664:	080036a5 	.word	0x080036a5
 8003668:	08003699 	.word	0x08003699
 800366c:	080036a5 	.word	0x080036a5
 8003670:	080036a5 	.word	0x080036a5
 8003674:	080036a5 	.word	0x080036a5
 8003678:	08003693 	.word	0x08003693
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036a5 	.word	0x080036a5
 8003684:	080036a5 	.word	0x080036a5
 8003688:	0800369f 	.word	0x0800369f
 800368c:	2300      	movs	r3, #0
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e0af      	b.n	80037f2 <UART_SetConfig+0x282>
 8003692:	2302      	movs	r3, #2
 8003694:	76fb      	strb	r3, [r7, #27]
 8003696:	e0ac      	b.n	80037f2 <UART_SetConfig+0x282>
 8003698:	2304      	movs	r3, #4
 800369a:	76fb      	strb	r3, [r7, #27]
 800369c:	e0a9      	b.n	80037f2 <UART_SetConfig+0x282>
 800369e:	2308      	movs	r3, #8
 80036a0:	76fb      	strb	r3, [r7, #27]
 80036a2:	e0a6      	b.n	80037f2 <UART_SetConfig+0x282>
 80036a4:	2310      	movs	r3, #16
 80036a6:	76fb      	strb	r3, [r7, #27]
 80036a8:	e0a3      	b.n	80037f2 <UART_SetConfig+0x282>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6d      	ldr	r2, [pc, #436]	; (8003864 <UART_SetConfig+0x2f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d120      	bne.n	80036f6 <UART_SetConfig+0x186>
 80036b4:	4b69      	ldr	r3, [pc, #420]	; (800385c <UART_SetConfig+0x2ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036be:	2b30      	cmp	r3, #48	; 0x30
 80036c0:	d013      	beq.n	80036ea <UART_SetConfig+0x17a>
 80036c2:	2b30      	cmp	r3, #48	; 0x30
 80036c4:	d814      	bhi.n	80036f0 <UART_SetConfig+0x180>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d009      	beq.n	80036de <UART_SetConfig+0x16e>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d810      	bhi.n	80036f0 <UART_SetConfig+0x180>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <UART_SetConfig+0x168>
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d006      	beq.n	80036e4 <UART_SetConfig+0x174>
 80036d6:	e00b      	b.n	80036f0 <UART_SetConfig+0x180>
 80036d8:	2300      	movs	r3, #0
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e089      	b.n	80037f2 <UART_SetConfig+0x282>
 80036de:	2302      	movs	r3, #2
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e086      	b.n	80037f2 <UART_SetConfig+0x282>
 80036e4:	2304      	movs	r3, #4
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e083      	b.n	80037f2 <UART_SetConfig+0x282>
 80036ea:	2308      	movs	r3, #8
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e080      	b.n	80037f2 <UART_SetConfig+0x282>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e07d      	b.n	80037f2 <UART_SetConfig+0x282>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5b      	ldr	r2, [pc, #364]	; (8003868 <UART_SetConfig+0x2f8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d120      	bne.n	8003742 <UART_SetConfig+0x1d2>
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <UART_SetConfig+0x2ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800370a:	2bc0      	cmp	r3, #192	; 0xc0
 800370c:	d013      	beq.n	8003736 <UART_SetConfig+0x1c6>
 800370e:	2bc0      	cmp	r3, #192	; 0xc0
 8003710:	d814      	bhi.n	800373c <UART_SetConfig+0x1cc>
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d009      	beq.n	800372a <UART_SetConfig+0x1ba>
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d810      	bhi.n	800373c <UART_SetConfig+0x1cc>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <UART_SetConfig+0x1b4>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d006      	beq.n	8003730 <UART_SetConfig+0x1c0>
 8003722:	e00b      	b.n	800373c <UART_SetConfig+0x1cc>
 8003724:	2300      	movs	r3, #0
 8003726:	76fb      	strb	r3, [r7, #27]
 8003728:	e063      	b.n	80037f2 <UART_SetConfig+0x282>
 800372a:	2302      	movs	r3, #2
 800372c:	76fb      	strb	r3, [r7, #27]
 800372e:	e060      	b.n	80037f2 <UART_SetConfig+0x282>
 8003730:	2304      	movs	r3, #4
 8003732:	76fb      	strb	r3, [r7, #27]
 8003734:	e05d      	b.n	80037f2 <UART_SetConfig+0x282>
 8003736:	2308      	movs	r3, #8
 8003738:	76fb      	strb	r3, [r7, #27]
 800373a:	e05a      	b.n	80037f2 <UART_SetConfig+0x282>
 800373c:	2310      	movs	r3, #16
 800373e:	76fb      	strb	r3, [r7, #27]
 8003740:	e057      	b.n	80037f2 <UART_SetConfig+0x282>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a49      	ldr	r2, [pc, #292]	; (800386c <UART_SetConfig+0x2fc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d125      	bne.n	8003798 <UART_SetConfig+0x228>
 800374c:	4b43      	ldr	r3, [pc, #268]	; (800385c <UART_SetConfig+0x2ec>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375a:	d017      	beq.n	800378c <UART_SetConfig+0x21c>
 800375c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003760:	d817      	bhi.n	8003792 <UART_SetConfig+0x222>
 8003762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003766:	d00b      	beq.n	8003780 <UART_SetConfig+0x210>
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d811      	bhi.n	8003792 <UART_SetConfig+0x222>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <UART_SetConfig+0x20a>
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	d006      	beq.n	8003786 <UART_SetConfig+0x216>
 8003778:	e00b      	b.n	8003792 <UART_SetConfig+0x222>
 800377a:	2300      	movs	r3, #0
 800377c:	76fb      	strb	r3, [r7, #27]
 800377e:	e038      	b.n	80037f2 <UART_SetConfig+0x282>
 8003780:	2302      	movs	r3, #2
 8003782:	76fb      	strb	r3, [r7, #27]
 8003784:	e035      	b.n	80037f2 <UART_SetConfig+0x282>
 8003786:	2304      	movs	r3, #4
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	e032      	b.n	80037f2 <UART_SetConfig+0x282>
 800378c:	2308      	movs	r3, #8
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e02f      	b.n	80037f2 <UART_SetConfig+0x282>
 8003792:	2310      	movs	r3, #16
 8003794:	76fb      	strb	r3, [r7, #27]
 8003796:	e02c      	b.n	80037f2 <UART_SetConfig+0x282>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <UART_SetConfig+0x2e4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d125      	bne.n	80037ee <UART_SetConfig+0x27e>
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <UART_SetConfig+0x2ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b0:	d017      	beq.n	80037e2 <UART_SetConfig+0x272>
 80037b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b6:	d817      	bhi.n	80037e8 <UART_SetConfig+0x278>
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d00b      	beq.n	80037d6 <UART_SetConfig+0x266>
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d811      	bhi.n	80037e8 <UART_SetConfig+0x278>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <UART_SetConfig+0x260>
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d006      	beq.n	80037dc <UART_SetConfig+0x26c>
 80037ce:	e00b      	b.n	80037e8 <UART_SetConfig+0x278>
 80037d0:	2300      	movs	r3, #0
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e00d      	b.n	80037f2 <UART_SetConfig+0x282>
 80037d6:	2302      	movs	r3, #2
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e00a      	b.n	80037f2 <UART_SetConfig+0x282>
 80037dc:	2304      	movs	r3, #4
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	e007      	b.n	80037f2 <UART_SetConfig+0x282>
 80037e2:	2308      	movs	r3, #8
 80037e4:	76fb      	strb	r3, [r7, #27]
 80037e6:	e004      	b.n	80037f2 <UART_SetConfig+0x282>
 80037e8:	2310      	movs	r3, #16
 80037ea:	76fb      	strb	r3, [r7, #27]
 80037ec:	e001      	b.n	80037f2 <UART_SetConfig+0x282>
 80037ee:	2310      	movs	r3, #16
 80037f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <UART_SetConfig+0x2e4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	f040 8087 	bne.w	800390c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037fe:	7efb      	ldrb	r3, [r7, #27]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d837      	bhi.n	8003874 <UART_SetConfig+0x304>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x29c>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003831 	.word	0x08003831
 8003810:	08003875 	.word	0x08003875
 8003814:	08003839 	.word	0x08003839
 8003818:	08003875 	.word	0x08003875
 800381c:	0800383f 	.word	0x0800383f
 8003820:	08003875 	.word	0x08003875
 8003824:	08003875 	.word	0x08003875
 8003828:	08003875 	.word	0x08003875
 800382c:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7fe fbb0 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8003834:	6178      	str	r0, [r7, #20]
        break;
 8003836:	e022      	b.n	800387e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <UART_SetConfig+0x300>)
 800383a:	617b      	str	r3, [r7, #20]
        break;
 800383c:	e01f      	b.n	800387e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fb11 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8003842:	6178      	str	r0, [r7, #20]
        break;
 8003844:	e01b      	b.n	800387e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	617b      	str	r3, [r7, #20]
        break;
 800384c:	e017      	b.n	800387e <UART_SetConfig+0x30e>
 800384e:	bf00      	nop
 8003850:	efff69f3 	.word	0xefff69f3
 8003854:	40008000 	.word	0x40008000
 8003858:	40013800 	.word	0x40013800
 800385c:	40021000 	.word	0x40021000
 8003860:	40004400 	.word	0x40004400
 8003864:	40004800 	.word	0x40004800
 8003868:	40004c00 	.word	0x40004c00
 800386c:	40005000 	.word	0x40005000
 8003870:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
        break;
 800387c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80f1 	beq.w	8003a68 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	429a      	cmp	r2, r3
 8003894:	d305      	bcc.n	80038a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d902      	bls.n	80038a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	76bb      	strb	r3, [r7, #26]
 80038a6:	e0df      	b.n	8003a68 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	020b      	lsls	r3, r1, #8
 80038ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038be:	0202      	lsls	r2, r0, #8
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	6849      	ldr	r1, [r1, #4]
 80038c4:	0849      	lsrs	r1, r1, #1
 80038c6:	4608      	mov	r0, r1
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	1814      	adds	r4, r2, r0
 80038ce:	eb43 0501 	adc.w	r5, r3, r1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	4620      	mov	r0, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	f7fc fc72 	bl	80001c8 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d308      	bcc.n	8003906 <UART_SetConfig+0x396>
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fa:	d204      	bcs.n	8003906 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e0b0      	b.n	8003a68 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	76bb      	strb	r3, [r7, #26]
 800390a:	e0ad      	b.n	8003a68 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003914:	d15c      	bne.n	80039d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003916:	7efb      	ldrb	r3, [r7, #27]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d828      	bhi.n	800396e <UART_SetConfig+0x3fe>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <UART_SetConfig+0x3b4>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003949 	.word	0x08003949
 8003928:	08003951 	.word	0x08003951
 800392c:	08003959 	.word	0x08003959
 8003930:	0800396f 	.word	0x0800396f
 8003934:	0800395f 	.word	0x0800395f
 8003938:	0800396f 	.word	0x0800396f
 800393c:	0800396f 	.word	0x0800396f
 8003940:	0800396f 	.word	0x0800396f
 8003944:	08003967 	.word	0x08003967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7fe fb24 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 800394c:	6178      	str	r0, [r7, #20]
        break;
 800394e:	e013      	b.n	8003978 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7fe fb36 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8003954:	6178      	str	r0, [r7, #20]
        break;
 8003956:	e00f      	b.n	8003978 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003958:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <UART_SetConfig+0x510>)
 800395a:	617b      	str	r3, [r7, #20]
        break;
 800395c:	e00c      	b.n	8003978 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395e:	f7fe fa81 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8003962:	6178      	str	r0, [r7, #20]
        break;
 8003964:	e008      	b.n	8003978 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396a:	617b      	str	r3, [r7, #20]
        break;
 800396c:	e004      	b.n	8003978 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	76bb      	strb	r3, [r7, #26]
        break;
 8003976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d074      	beq.n	8003a68 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005a      	lsls	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d916      	bls.n	80039ca <UART_SetConfig+0x45a>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d212      	bcs.n	80039ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f023 030f 	bic.w	r3, r3, #15
 80039ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	4313      	orrs	r3, r2
 80039be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	89fa      	ldrh	r2, [r7, #14]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e04e      	b.n	8003a68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	76bb      	strb	r3, [r7, #26]
 80039ce:	e04b      	b.n	8003a68 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d0:	7efb      	ldrb	r3, [r7, #27]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d827      	bhi.n	8003a26 <UART_SetConfig+0x4b6>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x46c>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a1f 	.word	0x08003a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7fe fac8 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8003a04:	6178      	str	r0, [r7, #20]
        break;
 8003a06:	e013      	b.n	8003a30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7fe fada 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	6178      	str	r0, [r7, #20]
        break;
 8003a0e:	e00f      	b.n	8003a30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <UART_SetConfig+0x510>)
 8003a12:	617b      	str	r3, [r7, #20]
        break;
 8003a14:	e00c      	b.n	8003a30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7fe fa25 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8003a1a:	6178      	str	r0, [r7, #20]
        break;
 8003a1c:	e008      	b.n	8003a30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	617b      	str	r3, [r7, #20]
        break;
 8003a24:	e004      	b.n	8003a30 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	76bb      	strb	r3, [r7, #26]
        break;
 8003a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	085a      	lsrs	r2, r3, #1
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	441a      	add	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d908      	bls.n	8003a64 <UART_SetConfig+0x4f4>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d204      	bcs.n	8003a64 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	e001      	b.n	8003a68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a74:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	00f42400 	.word	0x00f42400

08003a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d10a      	bne.n	8003b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bd6:	f7fd f909 	bl	8000dec <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d10e      	bne.n	8003c08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f82a 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e020      	b.n	8003c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d10e      	bne.n	8003c34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f814 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e00a      	b.n	8003c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	e05d      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d059      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7fd f8be 	bl	8000dec <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11b      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e042      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02b      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d123      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e00f      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d092      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	; (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2600      	movs	r6, #0
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4d0b      	ldr	r5, [pc, #44]	; (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	; (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 f820 	bl	8003da0 <_init>
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2600      	movs	r6, #0
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08003e08 	.word	0x08003e08
 8003d84:	08003e08 	.word	0x08003e08
 8003d88:	08003e08 	.word	0x08003e08
 8003d8c:	08003e0c 	.word	0x08003e0c

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
